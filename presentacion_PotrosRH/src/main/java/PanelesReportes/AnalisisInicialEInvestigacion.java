package PanelesReportes;

import Controles.ControlCampos;
import Controles.ControlFlujo;
import Enums.EstadoConfirmacionMalaConducta;
import Excepciones.PresentacionException;
import OptionPane.OptionPane;
import dto.ReporteMalaConductaDTO;
import dto.ReporteRevisadoDTO;
import java.awt.Frame;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.swing.JCheckBox;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;

/**
 * Panel para la recepción del análisis inicial e
 * investigación de la revisión del reporte
 * obtenido.
 * @author Leonardo Flores Leyva (252390)
 */
public class AnalisisInicialEInvestigacion extends javax.swing.JPanel {
    /**
     * Reporte revisado.
     */
    private final ReporteRevisadoDTO reporteRevisado;
    /**
     * JDialog para la confirmación de la mala
     * conducta del empleado reportado.
     */
    private final ConfirmacionMalaConducta confirmacionMalaConducta = new ConfirmacionMalaConducta((Frame) SwingUtilities.getWindowAncestor(this), true);
    /**
     * Lista de checkboxes de entrevistas realizadas.
     */
    private final List<JCheckBox> entrevistasRealizadas = new ArrayList<>();
    /**
     * Lista de checkboxes de evidencias revisadas.
     */
    private final List<JCheckBox> evidenciasRevisadas = new ArrayList<>();
    /**
     * CheckBox seleccionado del Análisis Inicial.
     */
    private JCheckBox checkBoxInfoSeleccionado;
    /**
     * CheckBox seleccionado de los antecedentes del empleado reportado.
     */
    private JCheckBox checkBoxAntecedentesSeleccionado;
    /**
     * Constructor por defecto.
     */
    public AnalisisInicialEInvestigacion() {
        initComponents();
        
        ControlCampos.limiteCaracteresAreaTexto(jTAAntecedentes, 1000);
        ControlCampos.limiteCaracteresAreaTexto(jTAOtrasEntrevistas, 1000);
        ControlCampos.limiteCaracteresAreaTexto(jTAOtrasEvidencias, 1000);
        
        reporteRevisado = new ReporteRevisadoDTO();
        
        checkBoxInfoSeleccionado = jCLSiInfoCompleta;
        checkBoxAntecedentesSeleccionado = jCLNoAntecedentes;
        
        entrevistasRealizadas.add(jCLEmpleadoInvolucrado);
        entrevistasRealizadas.add(jCLTestigos);
        entrevistasRealizadas.add(jCLSupervisor);
        entrevistasRealizadas.add(jCLOtrasEntrevistas);
        
        evidenciasRevisadas.add(jCLDocumentosInternos);
        evidenciasRevisadas.add(jCLCorreos);
        evidenciasRevisadas.add(jCLGrabaciones);
        evidenciasRevisadas.add(jCLOtrasEvidencias);
        
        jLAntecedentes.setVisible(false);
        jTAAntecedentes.setVisible(false);
        
        jLOtrasEntrevistasRealizadas.setVisible(false);
        jTAOtrasEntrevistas.setVisible(false);
        
        jLOtrasEvidenciasRevisadas.setVisible(false);
        jTAOtrasEvidencias.setVisible(false);
        
        jCLNoInfoCompleta.setSelected(true);
        jCLNoAntecedentes.setSelected(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnCancelar = new javax.swing.JButton();
        btnSiguiente = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLTitulo = new javax.swing.JLabel();
        jLAnalisisInicial = new javax.swing.JLabel();
        jLAntecedentes = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTAOtrasEvidencias = new javax.swing.JTextArea();
        jLAccionesPrevias = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTAAntecedentes = new javax.swing.JTextArea();
        jCLNoAntecedentes = new javax.swing.JCheckBox();
        jCLSiAntecedentes = new javax.swing.JCheckBox();
        jLOtrasEvidenciasRevisadas = new javax.swing.JLabel();
        jCLOtrasEntrevistas = new javax.swing.JCheckBox();
        jCLNoInfoCompleta = new javax.swing.JCheckBox();
        jLInformacionCompleta2 = new javax.swing.JLabel();
        jLInformacionCompleta3 = new javax.swing.JLabel();
        jCLSiInfoCompleta = new javax.swing.JCheckBox();
        jCLEmpleadoInvolucrado = new javax.swing.JCheckBox();
        jCLTestigos = new javax.swing.JCheckBox();
        jCLSupervisor = new javax.swing.JCheckBox();
        jLEntrevistasRealizadas = new javax.swing.JLabel();
        jCLOtrasEvidencias = new javax.swing.JCheckBox();
        jCLDocumentosInternos = new javax.swing.JCheckBox();
        jCLCorreos = new javax.swing.JCheckBox();
        jCLGrabaciones = new javax.swing.JCheckBox();
        jLEvidenciasRevisadas = new javax.swing.JLabel();
        jLOtrasEntrevistasRealizadas = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTAOtrasEntrevistas = new javax.swing.JTextArea();

        setBackground(new java.awt.Color(17, 119, 202));
        setMaximumSize(new java.awt.Dimension(1280, 720));
        setMinimumSize(new java.awt.Dimension(1280, 720));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnCancelar.setBackground(new java.awt.Color(255, 0, 0));
        btnCancelar.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        btnCancelar.setForeground(new java.awt.Color(255, 255, 255));
        btnCancelar.setText("Cancelar");
        btnCancelar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });
        add(btnCancelar, new org.netbeans.lib.awtextra.AbsoluteConstraints(910, 628, 137, 55));
        btnCancelar.setBorderPainted(false);
        btnCancelar.setContentAreaFilled(false);
        btnCancelar.setOpaque(false);
        btnCancelar.setUI(new javax.swing.plaf.basic.BasicButtonUI() {
            @Override
            public void paint(Graphics g, JComponent c) {
                Graphics2D g2 = (Graphics2D) g.create();
                g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
                // Pinta un fondo redondeado
                g2.setColor(c.getBackground());
                g2.fillRoundRect(0, 0, c.getWidth(), c.getHeight(), 50, 50);
                super.paint(g2, c);
                g2.dispose();
            }
        });

        btnSiguiente.setBackground(new java.awt.Color(0, 0, 0));
        btnSiguiente.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        btnSiguiente.setForeground(new java.awt.Color(255, 255, 255));
        btnSiguiente.setText("Siguiente");
        btnSiguiente.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSiguiente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSiguienteActionPerformed(evt);
            }
        });
        add(btnSiguiente, new org.netbeans.lib.awtextra.AbsoluteConstraints(1075, 628, 146, 55));
        btnSiguiente.setBorderPainted(false);
        btnSiguiente.setContentAreaFilled(false);
        btnSiguiente.setOpaque(false);
        btnSiguiente.setUI(new javax.swing.plaf.basic.BasicButtonUI() {
            @Override
            public void paint(Graphics g, JComponent c) {
                Graphics2D g2 = (Graphics2D) g.create();
                g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
                // Pinta un fondo redondeado
                g2.setColor(c.getBackground());
                g2.fillRoundRect(0, 0, c.getWidth(), c.getHeight(), 50, 50);
                super.paint(g2, c);
                g2.dispose();
            }
        });

        jPanel2.setBackground(new java.awt.Color(17, 119, 202));
        add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 28, 1280, -1));

        jLTitulo.setBackground(new java.awt.Color(0, 0, 0));
        jLTitulo.setFont(new java.awt.Font("Segoe UI", 1, 42)); // NOI18N
        jLTitulo.setForeground(new java.awt.Color(255, 255, 255));
        jLTitulo.setText("Revision de reporte");
        jLTitulo.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 5, true));
        jLTitulo.setOpaque(true);
        add(jLTitulo, new org.netbeans.lib.awtextra.AbsoluteConstraints(73, 44, -1, 55));

        jLAnalisisInicial.setFont(new java.awt.Font("Segoe UI", 1, 28)); // NOI18N
        jLAnalisisInicial.setForeground(new java.awt.Color(255, 255, 255));
        jLAnalisisInicial.setText("Análisis Inicial:");
        add(jLAnalisisInicial, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 140, 334, 49));

        jLAntecedentes.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLAntecedentes.setForeground(new java.awt.Color(0, 0, 0));
        jLAntecedentes.setText("Describa los antecedentes:");
        add(jLAntecedentes, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 420, 400, 49));

        jTAOtrasEvidencias.setBackground(new java.awt.Color(255, 255, 255));
        jTAOtrasEvidencias.setColumns(20);
        jTAOtrasEvidencias.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jTAOtrasEvidencias.setForeground(new java.awt.Color(0, 0, 0));
        jTAOtrasEvidencias.setLineWrap(true);
        jTAOtrasEvidencias.setRows(5);
        jTAOtrasEvidencias.setWrapStyleWord(true);
        jScrollPane1.setViewportView(jTAOtrasEvidencias);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(900, 460, 330, 150));

        jLAccionesPrevias.setFont(new java.awt.Font("Segoe UI", 1, 28)); // NOI18N
        jLAccionesPrevias.setForeground(new java.awt.Color(255, 255, 255));
        jLAccionesPrevias.setText("Investigación:");
        add(jLAccionesPrevias, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 140, -1, 49));

        jTAAntecedentes.setBackground(new java.awt.Color(255, 255, 255));
        jTAAntecedentes.setColumns(20);
        jTAAntecedentes.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jTAAntecedentes.setForeground(new java.awt.Color(0, 0, 0));
        jTAAntecedentes.setLineWrap(true);
        jTAAntecedentes.setRows(5);
        jTAAntecedentes.setWrapStyleWord(true);
        jScrollPane2.setViewportView(jTAAntecedentes);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 460, 400, 230));

        jCLNoAntecedentes.setBackground(new java.awt.Color(255, 255, 255));
        jCLNoAntecedentes.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jCLNoAntecedentes.setForeground(new java.awt.Color(0, 0, 0));
        jCLNoAntecedentes.setText("No");
        jCLNoAntecedentes.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jCLNoAntecedentes.setIconTextGap(10);
        jCLNoAntecedentes.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCLNoAntecedentesItemStateChanged(evt);
            }
        });
        add(jCLNoAntecedentes, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 350, 80, 40));

        jCLSiAntecedentes.setBackground(new java.awt.Color(255, 255, 255));
        jCLSiAntecedentes.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jCLSiAntecedentes.setForeground(new java.awt.Color(0, 0, 0));
        jCLSiAntecedentes.setText("Sí");
        jCLSiAntecedentes.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jCLSiAntecedentes.setIconTextGap(10);
        jCLSiAntecedentes.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCLSiAntecedentesItemStateChanged(evt);
            }
        });
        add(jCLSiAntecedentes, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 350, 80, 40));

        jLOtrasEvidenciasRevisadas.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLOtrasEvidenciasRevisadas.setForeground(new java.awt.Color(0, 0, 0));
        jLOtrasEvidenciasRevisadas.setText("Describa las otras evidencias revisadas:");
        add(jLOtrasEvidenciasRevisadas, new org.netbeans.lib.awtextra.AbsoluteConstraints(900, 430, 380, 30));

        jCLOtrasEntrevistas.setBackground(new java.awt.Color(255, 255, 255));
        jCLOtrasEntrevistas.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jCLOtrasEntrevistas.setForeground(new java.awt.Color(0, 0, 0));
        jCLOtrasEntrevistas.setText("Otras");
        jCLOtrasEntrevistas.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jCLOtrasEntrevistas.setIconTextGap(10);
        jCLOtrasEntrevistas.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCLOtrasEntrevistasItemStateChanged(evt);
            }
        });
        add(jCLOtrasEntrevistas, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 380, 310, 40));

        jCLNoInfoCompleta.setBackground(new java.awt.Color(255, 255, 255));
        jCLNoInfoCompleta.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jCLNoInfoCompleta.setForeground(new java.awt.Color(0, 0, 0));
        jCLNoInfoCompleta.setText("No");
        jCLNoInfoCompleta.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jCLNoInfoCompleta.setIconTextGap(10);
        jCLNoInfoCompleta.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCLNoInfoCompletaItemStateChanged(evt);
            }
        });
        add(jCLNoInfoCompleta, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 250, 80, 40));

        jLInformacionCompleta2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLInformacionCompleta2.setForeground(new java.awt.Color(0, 0, 0));
        jLInformacionCompleta2.setText("¿Existen antecedentes previos del empleado*?");
        add(jLInformacionCompleta2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 300, 400, 49));

        jLInformacionCompleta3.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLInformacionCompleta3.setForeground(new java.awt.Color(0, 0, 0));
        jLInformacionCompleta3.setText("¿El reporte tiene la información completa*?");
        add(jLInformacionCompleta3, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 190, 390, 49));

        jCLSiInfoCompleta.setBackground(new java.awt.Color(255, 255, 255));
        jCLSiInfoCompleta.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jCLSiInfoCompleta.setForeground(new java.awt.Color(0, 0, 0));
        jCLSiInfoCompleta.setText("Sí");
        jCLSiInfoCompleta.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jCLSiInfoCompleta.setIconTextGap(10);
        jCLSiInfoCompleta.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCLSiInfoCompletaItemStateChanged(evt);
            }
        });
        add(jCLSiInfoCompleta, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 250, 80, 40));

        jCLEmpleadoInvolucrado.setBackground(new java.awt.Color(255, 255, 255));
        jCLEmpleadoInvolucrado.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jCLEmpleadoInvolucrado.setForeground(new java.awt.Color(0, 0, 0));
        jCLEmpleadoInvolucrado.setText("Empleado involucrado");
        jCLEmpleadoInvolucrado.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jCLEmpleadoInvolucrado.setIconTextGap(10);
        add(jCLEmpleadoInvolucrado, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 230, 310, 40));

        jCLTestigos.setBackground(new java.awt.Color(255, 255, 255));
        jCLTestigos.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jCLTestigos.setForeground(new java.awt.Color(0, 0, 0));
        jCLTestigos.setText("Testigo(s)");
        jCLTestigos.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jCLTestigos.setIconTextGap(10);
        add(jCLTestigos, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 280, 310, 40));

        jCLSupervisor.setBackground(new java.awt.Color(255, 255, 255));
        jCLSupervisor.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jCLSupervisor.setForeground(new java.awt.Color(0, 0, 0));
        jCLSupervisor.setText("Supervisor");
        jCLSupervisor.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jCLSupervisor.setIconTextGap(10);
        add(jCLSupervisor, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 330, 310, 40));

        jLEntrevistasRealizadas.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLEntrevistasRealizadas.setForeground(new java.awt.Color(0, 0, 0));
        jLEntrevistasRealizadas.setText("Entrevistas realizadas*:");
        add(jLEntrevistasRealizadas, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 180, 200, 49));

        jCLOtrasEvidencias.setBackground(new java.awt.Color(255, 255, 255));
        jCLOtrasEvidencias.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jCLOtrasEvidencias.setForeground(new java.awt.Color(0, 0, 0));
        jCLOtrasEvidencias.setText("Otros");
        jCLOtrasEvidencias.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jCLOtrasEvidencias.setIconTextGap(10);
        jCLOtrasEvidencias.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCLOtrasEvidenciasItemStateChanged(evt);
            }
        });
        add(jCLOtrasEvidencias, new org.netbeans.lib.awtextra.AbsoluteConstraints(900, 380, 310, 40));

        jCLDocumentosInternos.setBackground(new java.awt.Color(255, 255, 255));
        jCLDocumentosInternos.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jCLDocumentosInternos.setForeground(new java.awt.Color(0, 0, 0));
        jCLDocumentosInternos.setText("Documentos internos");
        jCLDocumentosInternos.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jCLDocumentosInternos.setIconTextGap(10);
        add(jCLDocumentosInternos, new org.netbeans.lib.awtextra.AbsoluteConstraints(900, 230, 310, 40));

        jCLCorreos.setBackground(new java.awt.Color(255, 255, 255));
        jCLCorreos.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jCLCorreos.setForeground(new java.awt.Color(0, 0, 0));
        jCLCorreos.setText("Correos electrónicos");
        jCLCorreos.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jCLCorreos.setIconTextGap(10);
        add(jCLCorreos, new org.netbeans.lib.awtextra.AbsoluteConstraints(900, 280, 310, 40));

        jCLGrabaciones.setBackground(new java.awt.Color(255, 255, 255));
        jCLGrabaciones.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jCLGrabaciones.setForeground(new java.awt.Color(0, 0, 0));
        jCLGrabaciones.setText("Grabaciones");
        jCLGrabaciones.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jCLGrabaciones.setIconTextGap(10);
        add(jCLGrabaciones, new org.netbeans.lib.awtextra.AbsoluteConstraints(900, 330, 310, 40));

        jLEvidenciasRevisadas.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLEvidenciasRevisadas.setForeground(new java.awt.Color(0, 0, 0));
        jLEvidenciasRevisadas.setText("Entrevistas realizadas*:");
        add(jLEvidenciasRevisadas, new org.netbeans.lib.awtextra.AbsoluteConstraints(900, 180, 200, 49));

        jLOtrasEntrevistasRealizadas.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLOtrasEntrevistasRealizadas.setForeground(new java.awt.Color(0, 0, 0));
        jLOtrasEntrevistasRealizadas.setText("Describa las otras entrevistas realizadas:");
        add(jLOtrasEntrevistasRealizadas, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 430, 380, 30));

        jTAOtrasEntrevistas.setBackground(new java.awt.Color(255, 255, 255));
        jTAOtrasEntrevistas.setColumns(20);
        jTAOtrasEntrevistas.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jTAOtrasEntrevistas.setForeground(new java.awt.Color(0, 0, 0));
        jTAOtrasEntrevistas.setLineWrap(true);
        jTAOtrasEntrevistas.setRows(5);
        jTAOtrasEntrevistas.setWrapStyleWord(true);
        jScrollPane3.setViewportView(jTAOtrasEntrevistas);

        add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 460, 350, 230));
    }// </editor-fold>//GEN-END:initComponents
    /**
     * Botón Siguiente. Muestra el JDialog, para la confirmación de la
     * mala conducta del empleado reportado, y dependiendo de la respuesta,
     * realiza una u otra acción.
     * @param evt Click.
     */
    private void btnSiguienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSiguienteActionPerformed
        if(!confirmacionMalaConducta.isVisible())
            confirmacionMalaConducta.setVisible(true);
        EstadoConfirmacionMalaConducta confirmacion = confirmacionMalaConducta.obtenerEstado();
        if(confirmacion != EstadoConfirmacionMalaConducta.ANTERIOR){
            switch (confirmacion) {
               case CANCELAR -> {
                   int confirmacionCancelar = OptionPane.showConfirmDialog(this, "¿Seguro que desea cancelar la operación?", "Confirmación de cancelación");
                   if(confirmacionCancelar == JOptionPane.YES_OPTION)
                       ControlFlujo.mostrarSubmenuReportes();
               }
               case NO -> {
                   
               }
               default -> {
                   
               }
            }
        }
    }//GEN-LAST:event_btnSiguienteActionPerformed
    /**
     * Botón Cancelar. Regresa al Submenú de Reportes de Mala Conducta.
     * @param evt Click.
     */
    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        int confirmacion = OptionPane.showConfirmDialog(this, "¿Seguro que desea cancelar la operación?", "Confirmación de cancelación");
        if(confirmacion == JOptionPane.YES_OPTION)
            ControlFlujo.mostrarSubmenuReportes();
    }//GEN-LAST:event_btnCancelarActionPerformed
    /**
     * Asegura que solo el checkBox "Sí" pueda estar seleccionado, de
     * los checkBoxes de la información cokmpleta.
     * @param evt Click.
     */
    private void jCLSiInfoCompletaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCLSiInfoCompletaItemStateChanged
        validarCheckBoxInfoCompleta();
    }//GEN-LAST:event_jCLSiInfoCompletaItemStateChanged
    /**
     * Asegura que solo el checkBox "No" pueda estar seleccionado, de
     * los checkBoxes de la información cokmpleta.
     * @param evt Click.
     */
    private void jCLNoInfoCompletaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCLNoInfoCompletaItemStateChanged
        validarCheckBoxInfoCompleta();
    }//GEN-LAST:event_jCLNoInfoCompletaItemStateChanged
    /**
     * Asegura que solo un CheckBox de los antecedentes previos del
     * empleado reportado pueda estar seleccionado. Si el checkBox
     * seleccionado es el "Sí", se muestra el área de texto para 
     * la descripción de los antecedentes.
     * @param evt Click.
     */
    private void jCLSiAntecedentesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCLSiAntecedentesItemStateChanged
        validarCheckBoxAntecedentes();
    }//GEN-LAST:event_jCLSiAntecedentesItemStateChanged
    /**
     * Asegura que solo el checkBox "Sí" pueda estar seleccionado, de
     * los checkBoxes de los antecedentes.
     * @param evt Click.
     */
    private void jCLNoAntecedentesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCLNoAntecedentesItemStateChanged
        validarCheckBoxAntecedentes();
    }//GEN-LAST:event_jCLNoAntecedentesItemStateChanged
    /**
     * Si el checkBox "Otros", del apartado de Entrevistas realizadas, está
     * seleccionado, se muestra el área de texto para la descripción de 
     * otras entrevistas realizadas.
     * @param evt Click.
     */
    private void jCLOtrasEntrevistasItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCLOtrasEntrevistasItemStateChanged
        if(jCLOtrasEntrevistas.isSelected()){
            jLEntrevistasRealizadas.setVisible(true);
            jTAOtrasEntrevistas.setVisible(true);
        } else{
            jLEntrevistasRealizadas.setVisible(false);
            jTAOtrasEntrevistas.setVisible(false);
        }
    }//GEN-LAST:event_jCLOtrasEntrevistasItemStateChanged
    /**
     * Si el checkBox "Otros", del apartado de Evidencias revisadas, está
     * seleccionado, se muestra el área de texto para la descripción de 
     * otras evidencias revisadas.
     * @param evt Click.
     */
    private void jCLOtrasEvidenciasItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCLOtrasEvidenciasItemStateChanged
        if(jCLOtrasEvidencias.isSelected()){
            jLEvidenciasRevisadas.setVisible(true);
            jTAOtrasEvidencias.setVisible(true);
        } else{
            jLEvidenciasRevisadas.setVisible(false);
            jTAOtrasEvidencias.setVisible(false);
        }
    }//GEN-LAST:event_jCLOtrasEvidenciasItemStateChanged
    /**
     * 
     * @param reporte 
     */
    public void setReporteMalaConducta(ReporteMalaConductaDTO reporte) throws PresentacionException{
        if(reporte != null)
            reporteRevisado.setReporteMalaConducta(reporte);
        else
            throw new PresentacionException("Error: El reporte no puede estar vacío.");
        
    }
    /**
     * Asegura que solo el checkBox "No" pueda estar seleccionado, de
     * los checkBoxes de los antecedentes.
     * @param evt Click.
     */
    private void validarCheckBoxInfoCompleta(){
        if(jCLSiInfoCompleta.isSelected()){
            if(jCLNoInfoCompleta.isSelected())
                jCLNoInfoCompleta.setSelected(false);
            checkBoxInfoSeleccionado = jCLSiInfoCompleta;
        } else{
            if(!jCLNoInfoCompleta.isSelected())
                jCLNoInfoCompleta.setSelected(true);
            checkBoxInfoSeleccionado = jCLNoInfoCompleta;
        }
    }
    /**
     * Asegura que solo un CheckBox de los antecedentes previos del
     * empleado reportado pueda estar seleccionado. Si el checkBox
     * seleccionado es el "Sí", se muestra el área de texto para 
     * la descripción de los antecedentes.
     * @param evt Click.
     */
    private void validarCheckBoxAntecedentes(){
        if(jCLSiAntecedentes.isSelected()){
            if(jCLNoAntecedentes.isSelected())
               jCLNoAntecedentes.setSelected(false);
            checkBoxAntecedentesSeleccionado = jCLSiAntecedentes;
            jLAntecedentes.setVisible(true);
            jTAAntecedentes.setVisible(true);
        } else{
            if(!jCLNoAntecedentes.isSelected())
                jCLNoAntecedentes.setSelected(true);
            checkBoxAntecedentesSeleccionado = jCLNoAntecedentes;
            jLAntecedentes.setVisible(false);
            jTAAntecedentes.setVisible(false);
        }
    }
    /**
     * Carga el reporte revisado con la información ingresada.
     * @return ReporteRevisado.
     * @throws PresentacionException Excepción de la capa de Presentación.
     */
    private ReporteRevisadoDTO cargarReporte() throws PresentacionException{
       // Añade al reporte si tiene antecedentes previos. 
       if(checkBoxAntecedentesSeleccionado.equals(jCLSiAntecedentes)){
           // Si el área de texto de la descripción de los antecedentes está vacío.
           if(jTAAntecedentes.getText().trim().isEmpty())
               throw new PresentacionException("Por favor, ingrese la descripción de los antecedentes previos.");
           
            else{
               reporteRevisado.setTieneAntecedentesPrevios(true);
               reporteRevisado.setDescripcionAntecedentesPrevios(jTAAntecedentes.getText().trim());
           }
       } else
           reporteRevisado.setTieneAntecedentesPrevios(false); 
       
       // Añade al reporte si se tiene la información completa.
       if(checkBoxInfoSeleccionado.equals(jCLSiInfoCompleta))
          reporteRevisado.setInfoCompleta(true);
       else
          reporteRevisado.setInfoCompleta(false);
       
       // Conjunto de entrevistas realizadas.
       Set<String> entrevistas = new HashSet<>();
       
       // Agrega la información de los checklists seleccionados de las entrevistas
       for(JCheckBox checkBox: entrevistasRealizadas){
           // Solo añade el contenido de los checkBox seleccionados.
           if(checkBox.isSelected()){
               // Si el checkBox es el de otros.
               if (checkBox.equals(jCLOtrasEntrevistas)) {
                   // Añade la información del checkBox
                   entrevistas.add(checkBox.getText().trim());
                   // Si el área de texto de las otras entrevistas realizadas está vacío.
                   if (jTAOtrasEntrevistas.getText().trim().isEmpty()) 
                       throw new PresentacionException("Por favor, ingrese la descripción de las otras entrevistas realizadas");
                   // Si no, agrega la descripción de las otras entrevistas realizadas.
                    else 
                       reporteRevisado.setDescripcionOtrasEntrevistasRealizadas(jTAOtrasEntrevistas.getText().trim());
               // Si el checkBox seleccionado actual no es el de otros    
               } else
                   entrevistas.add(checkBox.getText().trim());
           }
       }
       // Se añade el conjunto de entrevistas realizadas al reporte revisado.
       reporteRevisado.setEntrevistasRealizadas(entrevistas);
       
       // Conjunto de evidencias revisadas.
       Set<String> evidencias = new HashSet<>();
       
       // Agrega la información de los checklists seleccionados de las evidencias
       for(JCheckBox checkBox: evidenciasRevisadas){
           // Solo añade el contenido de los checkBox seleccionados.
           if(checkBox.isSelected()){
               // Si el checkBox es el de otros.
               if (checkBox.equals(jCLOtrasEvidencias)) {
                   // Añade la información del checkBox
                   evidencias.add(checkBox.getText().trim());
                   // Si el área de texto de las otras evidencias revisadas está vacío.
                   if (jTAOtrasEvidencias.getText().trim().isEmpty()) 
                       throw new PresentacionException("Por favor, ingrese la descripción de las otras entrevistas realizadas");
                   // Si no, agrega la descripción de las otras evidencias revisadas.
                    else 
                       reporteRevisado.setDescripcionOtrasEvidencias(jTAOtrasEvidencias.getText().trim());
               // Si el checkBox seleccionado actual no es el de otros    
               } else
                   evidencias.add(checkBox.getText().trim());
           }
       }
       // Se añade el conjunto de evidencias revisadas al reporte revisado.
       reporteRevisado.setEvidenciasRevisadas(evidencias);
       
       // Regresa el reporte listo para ser transferido.
       return reporteRevisado; 
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnSiguiente;
    private javax.swing.JCheckBox jCLCorreos;
    private javax.swing.JCheckBox jCLDocumentosInternos;
    private javax.swing.JCheckBox jCLEmpleadoInvolucrado;
    private javax.swing.JCheckBox jCLGrabaciones;
    private javax.swing.JCheckBox jCLNoAntecedentes;
    private javax.swing.JCheckBox jCLNoInfoCompleta;
    private javax.swing.JCheckBox jCLOtrasEntrevistas;
    private javax.swing.JCheckBox jCLOtrasEvidencias;
    private javax.swing.JCheckBox jCLSiAntecedentes;
    private javax.swing.JCheckBox jCLSiInfoCompleta;
    private javax.swing.JCheckBox jCLSupervisor;
    private javax.swing.JCheckBox jCLTestigos;
    private javax.swing.JLabel jLAccionesPrevias;
    private javax.swing.JLabel jLAnalisisInicial;
    private javax.swing.JLabel jLAntecedentes;
    private javax.swing.JLabel jLEntrevistasRealizadas;
    private javax.swing.JLabel jLEvidenciasRevisadas;
    private javax.swing.JLabel jLInformacionCompleta2;
    private javax.swing.JLabel jLInformacionCompleta3;
    private javax.swing.JLabel jLOtrasEntrevistasRealizadas;
    private javax.swing.JLabel jLOtrasEvidenciasRevisadas;
    private javax.swing.JLabel jLTitulo;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTAAntecedentes;
    private javax.swing.JTextArea jTAOtrasEntrevistas;
    private javax.swing.JTextArea jTAOtrasEvidencias;
    // End of variables declaration//GEN-END:variables
}