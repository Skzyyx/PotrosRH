package PanelesReportes;

import Controles.ControlFlujo;
import Controles.ControlReportes;
import Excepciones.PresentacionException;
import OptionPane.OptionPane;
import dto.ReporteRevisadoDTO;
import dto.ReporteRevisadoSancionadoDTO;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.event.ItemEvent;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.swing.JCheckBox;
import javax.swing.JComponent;
import javax.swing.JOptionPane;

/**
 * Panel para el ingreso de la información, respecto a
 * la determinación del caso del reporte.
 * @author Leonardo Flores Leyva (252390)
 */
public class DeterminacionCaso extends javax.swing.JPanel {
    /**
     * Reporte revisado a registrar como reporte sancionado
     */
    private ReporteRevisadoDTO reporteRevisado = new ReporteRevisadoDTO();
    /**
     * Lista de normas checkBoxes de las normas violadas.
     */
    private final List<JCheckBox> normasVioladas = new ArrayList<>();
    /**
     * Lista de normas checkBoxes de las posibles sanciones a aplica.
     */
    private final List<JCheckBox> sanciones = new ArrayList<>();
    /**
     * Lista de normas checkBoxes de los posibles niveles de gravedad.
     */
    private final List<JCheckBox> nivelesGravedad = new ArrayList<>();
    /**
     * CheckBox seleccionado de las sanciones.
     */
    private JCheckBox sancionSeleccionada;
    /**
     * CheckBox seleccionado de los niveles de gravedad.
     */
    private JCheckBox nivelSeleccionado;
    /**
     * Constructor por defecto.
     */
    public DeterminacionCaso() {
        initComponents();
        normasVioladas.add(jCLPoliticaPrivacidad);
        normasVioladas.add(jCLRespetoTolerancia);
        normasVioladas.add(jCLDesobediencia);
        normasVioladas.add(jCLDivulgacionConfidencial);
        
        validarCheckBoxesSanciones(jCLPoliticaPrivacidad);
        validarCheckBoxesSanciones(jCLRespetoTolerancia);
        validarCheckBoxesSanciones(jCLDesobediencia);
        validarCheckBoxesSanciones(jCLDivulgacionConfidencial);
        
        validarCheckBoxesNivelesGravedad(jCLLeve);
        validarCheckBoxesNivelesGravedad(jCLModerado);
        validarCheckBoxesNivelesGravedad(jCLGrave);
        
        jLOtraAccionCorrectiva.setVisible(false);
        jTAOtraAccionCorrectiva.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnCancelar = new javax.swing.JButton();
        btnAnterior = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLTitulo = new javax.swing.JLabel();
        jLDeterminacionCaso = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTAOtraAccionCorrectiva = new javax.swing.JTextArea();
        jLOtraAccionCorrectiva = new javax.swing.JLabel();
        jLAccionCorrectiva = new javax.swing.JLabel();
        jCLDivulgacionConfidencial = new javax.swing.JCheckBox();
        jCLLeve = new javax.swing.JCheckBox();
        jCLModerado = new javax.swing.JCheckBox();
        jCLGrave = new javax.swing.JCheckBox();
        jCLCapacitacionObligatoria = new javax.swing.JCheckBox();
        jCLAdvertenciaVerbal = new javax.swing.JCheckBox();
        jCLOtraAccionCorrectiva = new javax.swing.JCheckBox();
        jCLSuspensionTemporal = new javax.swing.JCheckBox();
        jCLPoliticaPrivacidad = new javax.swing.JCheckBox();
        jCLRespetoTolerancia = new javax.swing.JCheckBox();
        jCLDesobediencia = new javax.swing.JCheckBox();
        jLNormasVioladas = new javax.swing.JLabel();
        jLNivelGravedad = new javax.swing.JLabel();
        jCLDespido = new javax.swing.JCheckBox();
        jCLAdvertenciaEscrita = new javax.swing.JCheckBox();
        btnConfirmar = new javax.swing.JButton();

        setBackground(new java.awt.Color(17, 119, 202));
        setMaximumSize(new java.awt.Dimension(1280, 720));
        setMinimumSize(new java.awt.Dimension(1280, 720));
        setPreferredSize(new java.awt.Dimension(1280, 720));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnCancelar.setBackground(new java.awt.Color(255, 0, 0));
        btnCancelar.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        btnCancelar.setForeground(new java.awt.Color(255, 255, 255));
        btnCancelar.setText("Cancelar");
        btnCancelar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });
        add(btnCancelar, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 630, 137, 55));
        btnCancelar.setBorderPainted(false);
        btnCancelar.setContentAreaFilled(false);
        btnCancelar.setOpaque(false);
        btnCancelar.setUI(new javax.swing.plaf.basic.BasicButtonUI() {
            @Override
            public void paint(Graphics g, JComponent c) {
                Graphics2D g2 = (Graphics2D) g.create();
                g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
                // Pinta un fondo redondeado
                g2.setColor(c.getBackground());
                g2.fillRoundRect(0, 0, c.getWidth(), c.getHeight(), 50, 50);
                super.paint(g2, c);
                g2.dispose();
            }
        });

        btnAnterior.setBackground(new java.awt.Color(0, 0, 0));
        btnAnterior.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        btnAnterior.setForeground(new java.awt.Color(255, 255, 255));
        btnAnterior.setText("Anterior");
        btnAnterior.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnAnterior.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnteriorActionPerformed(evt);
            }
        });
        add(btnAnterior, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 630, 146, 55));
        btnAnterior.setBorderPainted(false);
        btnAnterior.setContentAreaFilled(false);
        btnAnterior.setOpaque(false);
        btnAnterior.setUI(new javax.swing.plaf.basic.BasicButtonUI() {
            @Override
            public void paint(Graphics g, JComponent c) {
                Graphics2D g2 = (Graphics2D) g.create();
                g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
                // Pinta un fondo redondeado
                g2.setColor(c.getBackground());
                g2.fillRoundRect(0, 0, c.getWidth(), c.getHeight(), 50, 50);
                super.paint(g2, c);
                g2.dispose();
            }
        });

        jPanel2.setBackground(new java.awt.Color(17, 119, 202));
        add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 28, 1280, -1));

        jLTitulo.setBackground(new java.awt.Color(0, 0, 0));
        jLTitulo.setFont(new java.awt.Font("Segoe UI", 1, 42)); // NOI18N
        jLTitulo.setForeground(new java.awt.Color(255, 255, 255));
        jLTitulo.setText("Revision de reporte");
        jLTitulo.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 5, true));
        jLTitulo.setOpaque(true);
        add(jLTitulo, new org.netbeans.lib.awtextra.AbsoluteConstraints(73, 44, -1, 55));

        jLDeterminacionCaso.setFont(new java.awt.Font("Segoe UI", 1, 28)); // NOI18N
        jLDeterminacionCaso.setForeground(new java.awt.Color(255, 255, 255));
        jLDeterminacionCaso.setText("Determinación del caso:");
        add(jLDeterminacionCaso, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 140, 334, 49));

        jTAOtraAccionCorrectiva.setBackground(new java.awt.Color(255, 255, 255));
        jTAOtraAccionCorrectiva.setColumns(20);
        jTAOtraAccionCorrectiva.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jTAOtraAccionCorrectiva.setForeground(new java.awt.Color(0, 0, 0));
        jTAOtraAccionCorrectiva.setLineWrap(true);
        jTAOtraAccionCorrectiva.setRows(5);
        jTAOtraAccionCorrectiva.setWrapStyleWord(true);
        jScrollPane1.setViewportView(jTAOtraAccionCorrectiva);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 330, 330, 150));

        jLOtraAccionCorrectiva.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLOtraAccionCorrectiva.setForeground(new java.awt.Color(0, 0, 0));
        jLOtraAccionCorrectiva.setText("Describa el otro tipo de sanción:");
        add(jLOtraAccionCorrectiva, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 300, 280, 30));

        jLAccionCorrectiva.setFont(new java.awt.Font("Segoe UI", 1, 22)); // NOI18N
        jLAccionCorrectiva.setForeground(new java.awt.Color(0, 0, 0));
        jLAccionCorrectiva.setText("Acción correctiva o sanción aplicada:");
        add(jLAccionCorrectiva, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 190, 440, 49));

        jCLDivulgacionConfidencial.setBackground(new java.awt.Color(255, 255, 255));
        jCLDivulgacionConfidencial.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jCLDivulgacionConfidencial.setForeground(new java.awt.Color(0, 0, 0));
        jCLDivulgacionConfidencial.setText("Divulgación de información confidencial");
        jCLDivulgacionConfidencial.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jCLDivulgacionConfidencial.setIconTextGap(10);
        add(jCLDivulgacionConfidencial, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 400, 330, 40));

        jCLLeve.setBackground(new java.awt.Color(255, 255, 255));
        jCLLeve.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jCLLeve.setForeground(new java.awt.Color(0, 0, 0));
        jCLLeve.setText("Leve");
        jCLLeve.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jCLLeve.setIconTextGap(10);
        add(jCLLeve, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 530, 210, 40));

        jCLModerado.setBackground(new java.awt.Color(255, 255, 255));
        jCLModerado.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jCLModerado.setForeground(new java.awt.Color(0, 0, 0));
        jCLModerado.setText("Moderado");
        jCLModerado.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jCLModerado.setIconTextGap(10);
        add(jCLModerado, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 580, 210, 40));

        jCLGrave.setBackground(new java.awt.Color(255, 255, 255));
        jCLGrave.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jCLGrave.setForeground(new java.awt.Color(0, 0, 0));
        jCLGrave.setText("Grave");
        jCLGrave.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jCLGrave.setIconTextGap(10);
        add(jCLGrave, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 630, 210, 40));

        jCLCapacitacionObligatoria.setBackground(new java.awt.Color(255, 255, 255));
        jCLCapacitacionObligatoria.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jCLCapacitacionObligatoria.setForeground(new java.awt.Color(0, 0, 0));
        jCLCapacitacionObligatoria.setText("Capacitación obligatoria");
        jCLCapacitacionObligatoria.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jCLCapacitacionObligatoria.setIconTextGap(10);
        add(jCLCapacitacionObligatoria, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 450, 310, 40));

        jCLAdvertenciaVerbal.setBackground(new java.awt.Color(255, 255, 255));
        jCLAdvertenciaVerbal.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jCLAdvertenciaVerbal.setForeground(new java.awt.Color(0, 0, 0));
        jCLAdvertenciaVerbal.setText("Advertencia verbal");
        jCLAdvertenciaVerbal.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jCLAdvertenciaVerbal.setIconTextGap(10);
        add(jCLAdvertenciaVerbal, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 250, 310, 40));

        jCLOtraAccionCorrectiva.setBackground(new java.awt.Color(255, 255, 255));
        jCLOtraAccionCorrectiva.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jCLOtraAccionCorrectiva.setForeground(new java.awt.Color(0, 0, 0));
        jCLOtraAccionCorrectiva.setText("Otra");
        jCLOtraAccionCorrectiva.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jCLOtraAccionCorrectiva.setIconTextGap(10);
        jCLOtraAccionCorrectiva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCLOtraAccionCorrectivaActionPerformed(evt);
            }
        });
        add(jCLOtraAccionCorrectiva, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 250, 310, 40));

        jCLSuspensionTemporal.setBackground(new java.awt.Color(255, 255, 255));
        jCLSuspensionTemporal.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jCLSuspensionTemporal.setForeground(new java.awt.Color(0, 0, 0));
        jCLSuspensionTemporal.setText("Suspensión temporal");
        jCLSuspensionTemporal.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jCLSuspensionTemporal.setIconTextGap(10);
        add(jCLSuspensionTemporal, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 350, 310, 40));

        jCLPoliticaPrivacidad.setBackground(new java.awt.Color(255, 255, 255));
        jCLPoliticaPrivacidad.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jCLPoliticaPrivacidad.setForeground(new java.awt.Color(0, 0, 0));
        jCLPoliticaPrivacidad.setText("Política de privacidad");
        jCLPoliticaPrivacidad.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jCLPoliticaPrivacidad.setIconTextGap(10);
        add(jCLPoliticaPrivacidad, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 250, 330, 40));

        jCLRespetoTolerancia.setBackground(new java.awt.Color(255, 255, 255));
        jCLRespetoTolerancia.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jCLRespetoTolerancia.setForeground(new java.awt.Color(0, 0, 0));
        jCLRespetoTolerancia.setText("Respeto y tolerancia");
        jCLRespetoTolerancia.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jCLRespetoTolerancia.setIconTextGap(10);
        add(jCLRespetoTolerancia, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 300, 330, 40));

        jCLDesobediencia.setBackground(new java.awt.Color(255, 255, 255));
        jCLDesobediencia.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jCLDesobediencia.setForeground(new java.awt.Color(0, 0, 0));
        jCLDesobediencia.setText("Desobediencia");
        jCLDesobediencia.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jCLDesobediencia.setIconTextGap(10);
        add(jCLDesobediencia, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 350, 330, 40));

        jLNormasVioladas.setFont(new java.awt.Font("Segoe UI", 1, 22)); // NOI18N
        jLNormasVioladas.setForeground(new java.awt.Color(0, 0, 0));
        jLNormasVioladas.setText("Normas o políticas violadas*:");
        add(jLNormasVioladas, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 190, 330, 49));

        jLNivelGravedad.setFont(new java.awt.Font("Segoe UI", 1, 22)); // NOI18N
        jLNivelGravedad.setForeground(new java.awt.Color(0, 0, 0));
        jLNivelGravedad.setText("Nivel de gravedad*:");
        add(jLNivelGravedad, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 470, 220, 49));

        jCLDespido.setBackground(new java.awt.Color(255, 255, 255));
        jCLDespido.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jCLDespido.setForeground(new java.awt.Color(0, 0, 0));
        jCLDespido.setText("Despido");
        jCLDespido.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jCLDespido.setIconTextGap(10);
        add(jCLDespido, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 400, 310, 40));

        jCLAdvertenciaEscrita.setBackground(new java.awt.Color(255, 255, 255));
        jCLAdvertenciaEscrita.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jCLAdvertenciaEscrita.setForeground(new java.awt.Color(0, 0, 0));
        jCLAdvertenciaEscrita.setText("Advertencia escrita");
        jCLAdvertenciaEscrita.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jCLAdvertenciaEscrita.setIconTextGap(10);
        add(jCLAdvertenciaEscrita, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 300, 310, 40));

        btnConfirmar.setBackground(new java.awt.Color(0, 0, 0));
        btnConfirmar.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        btnConfirmar.setForeground(new java.awt.Color(255, 255, 255));
        btnConfirmar.setText("Confirmar");
        btnConfirmar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnConfirmar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfirmarActionPerformed(evt);
            }
        });
        add(btnConfirmar, new org.netbeans.lib.awtextra.AbsoluteConstraints(1075, 628, 146, 55));
        btnAnterior.setBorderPainted(false);
        btnAnterior.setContentAreaFilled(false);
        btnAnterior.setOpaque(false);
        btnAnterior.setUI(new javax.swing.plaf.basic.BasicButtonUI() {
            @Override
            public void paint(Graphics g, JComponent c) {
                Graphics2D g2 = (Graphics2D) g.create();
                g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
                // Pinta un fondo redondeado
                g2.setColor(c.getBackground());
                g2.fillRoundRect(0, 0, c.getWidth(), c.getHeight(), 50, 50);
                super.paint(g2, c);
                g2.dispose();
            }
        });
    }// </editor-fold>//GEN-END:initComponents
    /**
     * Regresa al panel del análisis inicial e investigación.
     * @param evt Click.
     */
    private void btnAnteriorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnteriorActionPerformed
        try {
            ControlFlujo.mostrarAnalisisIncialEInvestigacion(reporteRevisado.getReporteMalaConducta());
        } catch (PresentacionException e) {OptionPane.showErrorMessage(this, "ERROR: " + e.getMessage(), "ERROR");}
    }//GEN-LAST:event_btnAnteriorActionPerformed
    /**
     * Botón Cancelar. Regresa al Submenú de Reportes de Mala Conducta.
     * @param evt Click.
     */
    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        int confirmacion = OptionPane.showConfirmDialog(this, "¿Seguro que desea cancelar la operación?", "Confirmación de cancelación");
        if(confirmacion == JOptionPane.YES_OPTION)
            ControlFlujo.mostrarSubmenuReportes();
    }//GEN-LAST:event_btnCancelarActionPerformed
    /**
     * Muestra el área de texto para la descripción de otro tipo de
     * sanción, si es que el checkBox "Otro" es seleccionado.
     * @param evt Click.
     */
    private void jCLOtraAccionCorrectivaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCLOtraAccionCorrectivaActionPerformed
        if(jCLOtraAccionCorrectiva.isSelected()){
            jLOtraAccionCorrectiva.setVisible(true);
            jTAOtraAccionCorrectiva.setVisible(true);
        } else{
            jLOtraAccionCorrectiva.setVisible(false);
            jTAOtraAccionCorrectiva.setVisible(false);
        }
    }//GEN-LAST:event_jCLOtraAccionCorrectivaActionPerformed
    /**
     * Registra el reporte sancionado y regresa al submenú
     * de reportes.
     * @param evt Click.
     */
    private void btnConfirmarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfirmarActionPerformed
        try {
            // El reporte revisado se convierte a un reporte revisado sancionado.
            ReporteRevisadoSancionadoDTO reporteSancionado = (ReporteRevisadoSancionadoDTO) reporteRevisado;
            
            // Se crea un nuevo conjunto de normas violadas, que almacena todas las seleccionadas.
            Set<String> normas = new HashSet<>();
            // Se recorre la lista de checkBoxes de las normas violadas.
            for(JCheckBox norma: normasVioladas){
                if(norma.isSelected())
                    normas.add(norma.getText());
            }
            // Si ningún checkBox de las normas violadas ha sido seleccionado.
            if(normas.isEmpty())
                throw new PresentacionException("Por favor, elija una norma violada por el empleado reportado.");
            else // Se agregan las normas seleccionadas
                reporteSancionado.setNormasVioladas(normas);
            
            // Se comprueba que existe un nivel de gravedad seleccionado.
            if(nivelSeleccionado == null)
                throw new PresentacionException("Por favor, seleccione un nivel de gravedad del incidente.");
            else // Se agrega el nivel de gravedad en mayúsculas.
                reporteSancionado.setNivelGravedad(nivelSeleccionado.getText().toUpperCase());
            
            // Se comprueba que existe una sanción aplicada.
            if(sancionSeleccionada == null)
                throw new PresentacionException("Por favor, seleccione una sanción a aplicar.");
            // Si la sanción seleccionada es la de "Otra"
            else if (sancionSeleccionada.equals(jCLOtraAccionCorrectiva)){
                // Se verifica se haya ingresado una descripción del otro tipo de sanción impuesta.
                if(jTAOtraAccionCorrectiva.getText().trim().isEmpty())
                    throw new PresentacionException("Por favor, ingrese la descripción de la otra sanción correctiva a aplicar.");
                // Se agrega el tipo de sanción y la descripción del otro tipo de sanción impuesta al reporte sancionado.
                reporteSancionado.setSancionImpuesta(jTAOtraAccionCorrectiva.getText().trim());
                
            // Se agrega el tipo de sanción impuesta al reporte sancionado.
            } else
                reporteSancionado.setSancionImpuesta(sancionSeleccionada.getText());
            // Intenta registrar el reporte sancionado.
            if(ControlReportes.getInstance().registrarReporteSancionado(reporteSancionado) != null){
                OptionPane.showInfoMessage(this, "¡Reporte revisado registrado con éxito!", "Revisión exitosa");
                ControlFlujo.mostrarSubmenuReportes();
            } else
                OptionPane.showInfoMessage(this, "Ha ocurrido un error al intentar registrar el reporte sancionado.", "Error en registro");
            
        } catch (PresentacionException e) {OptionPane.showErrorMessage(this, "ERROR: " + e.getMessage(), "ERROR");}
    }//GEN-LAST:event_btnConfirmarActionPerformed
    
    /**
     * Valida que solo el checkBox de las sanciones recibido 
     * sea el único seleccionado.
     * @param checkBox CheckBox.
     */
    private void validarCheckBoxesSanciones(JCheckBox checkBox){
        checkBox.addItemListener((ItemEvent e) -> {
            if (e.getStateChange() == ItemEvent.SELECTED) {
                sancionSeleccionada = checkBox;
                for(JCheckBox actual : sanciones){
                    if(actual.isSelected() && !actual.equals(checkBox))
                        actual.setSelected(false);
                }
            } else{
                // Si se deselecciona la sancion, se convierte a null el atributo sancionSeleccionada.
                boolean haySancionSeleccionada = false;
                for(JCheckBox actual : sanciones){
                    if(actual.isSelected())
                        haySancionSeleccionada = true;
                }
                if(!haySancionSeleccionada)
                    sancionSeleccionada = null;
            }
        });
    }
    /**
     * Valida que solo el checkBox de los niveles de gravedad
     * recibido sea el único seleccionado.
     * @param checkBox CheckBox.
     */
    private void validarCheckBoxesNivelesGravedad(JCheckBox checkBox){
        checkBox.addItemListener((ItemEvent e) -> {
            if (e.getStateChange() == ItemEvent.SELECTED) {
                nivelSeleccionado = checkBox;
                for(JCheckBox actual : nivelesGravedad){
                    if(actual.isSelected() && !actual.equals(checkBox))
                        actual.setSelected(false);
                }
            } else{
                // Si se deselecciona el nivel de gravedad, se convierte a null el atributo nivelSeleccionado.
                boolean hayNivelSeleccionado = false;
                for(JCheckBox actual : nivelesGravedad){
                    if(actual.isSelected())
                        hayNivelSeleccionado = true;
                }
                if(!hayNivelSeleccionado)
                    nivelSeleccionado = null;
            }
        });
    }
    
    /**
     * Añade el reporte revisado recibido, asegurándose que
     * no esté vacío.
     * @param reporte Reporte Revisado a añadir.
     * @throws PresentacionException Excepción de la capa de Presentación.
     */
    public void setReporte(ReporteRevisadoDTO reporte) throws PresentacionException{
        if(reporte != null)
            reporteRevisado = reporte;
         else
            throw new PresentacionException("El reporte no puede estar vacío.");
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAnterior;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnConfirmar;
    private javax.swing.JCheckBox jCLAdvertenciaEscrita;
    private javax.swing.JCheckBox jCLAdvertenciaVerbal;
    private javax.swing.JCheckBox jCLCapacitacionObligatoria;
    private javax.swing.JCheckBox jCLDesobediencia;
    private javax.swing.JCheckBox jCLDespido;
    private javax.swing.JCheckBox jCLDivulgacionConfidencial;
    private javax.swing.JCheckBox jCLGrave;
    private javax.swing.JCheckBox jCLLeve;
    private javax.swing.JCheckBox jCLModerado;
    private javax.swing.JCheckBox jCLOtraAccionCorrectiva;
    private javax.swing.JCheckBox jCLPoliticaPrivacidad;
    private javax.swing.JCheckBox jCLRespetoTolerancia;
    private javax.swing.JCheckBox jCLSuspensionTemporal;
    private javax.swing.JLabel jLAccionCorrectiva;
    private javax.swing.JLabel jLDeterminacionCaso;
    private javax.swing.JLabel jLNivelGravedad;
    private javax.swing.JLabel jLNormasVioladas;
    private javax.swing.JLabel jLOtraAccionCorrectiva;
    private javax.swing.JLabel jLTitulo;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTAOtraAccionCorrectiva;
    // End of variables declaration//GEN-END:variables
}