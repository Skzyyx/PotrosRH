package PanelesReportes;

import Controles.ControlCampos;
import Controles.ControlFlujo;
import Controles.ControlReportes;
import Excepciones.PresentacionException;
import OptionPane.OptionPane;
import dto.ReporteMalaConductaDTO;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.event.ItemEvent;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JCheckBox;
import javax.swing.JComponent;
import javax.swing.JOptionPane;

/**
 * Panel para el ingreso del impacto del incidente.
 * @author Leonardo Flores Leyva (252390)
 */
public class ImpactoIncidente extends javax.swing.JPanel {
    // Lista de CheckBox de la pantalla
    private final List<JCheckBox> checkBoxes = new ArrayList<>();
    // CheckBox seleccionado.
    private JCheckBox checkBoxSeleccionado;
    // Reporte que se llenará con los nuevos datos.
    private ReporteMalaConductaDTO reporteMalaConducta;
    /**
     * Constructor por defecto.
     * Inicializa todas las configuraciones necesarias.
     */
    public ImpactoIncidente() {
        initComponents();
        ControlCampos.limiteCaracteresAreaTexto(jTAOtros, 1000);
        
        checkBoxes.add(jCLGeneroConflictos);
        checkBoxes.add(jCLIncumplioNormas);
        checkBoxes.add(jCLAfectoProductividad);
        checkBoxes.add(jCLOtro);
        
        validarCheckBoxes(jCLGeneroConflictos);
        validarCheckBoxes(jCLIncumplioNormas);
        validarCheckBoxes(jCLAfectoProductividad);
        validarCheckBoxes(jCLOtro);
        
        jTAOtros.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnCancelar = new javax.swing.JButton();
        btnEnviar = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLTitulo = new javax.swing.JLabel();
        jLImpactoIncidente = new javax.swing.JLabel();
        jLAccionesPreviasOpcional = new javax.swing.JLabel();
        btnAnterior = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTAccionesPrevias = new javax.swing.JTextArea();
        jLAccionesPrevias = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTAOtros = new javax.swing.JTextArea();
        jCLIncumplioNormas = new javax.swing.JCheckBox();
        jCLGeneroConflictos = new javax.swing.JCheckBox();
        jCLAfectoProductividad = new javax.swing.JCheckBox();
        jCLOtro = new javax.swing.JCheckBox();

        setBackground(new java.awt.Color(17, 119, 202));
        setMaximumSize(new java.awt.Dimension(1280, 720));
        setMinimumSize(new java.awt.Dimension(1280, 720));

        btnCancelar.setBackground(new java.awt.Color(255, 0, 0));
        btnCancelar.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        btnCancelar.setForeground(new java.awt.Color(255, 255, 255));
        btnCancelar.setText("Cancelar");
        btnCancelar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        btnEnviar.setBackground(new java.awt.Color(0, 0, 0));
        btnEnviar.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        btnEnviar.setForeground(new java.awt.Color(255, 255, 255));
        btnEnviar.setText("Enviar");
        btnEnviar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnEnviar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEnviarActionPerformed(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(17, 119, 202));

        jLTitulo.setBackground(new java.awt.Color(0, 0, 0));
        jLTitulo.setFont(new java.awt.Font("Segoe UI", 1, 42)); // NOI18N
        jLTitulo.setForeground(new java.awt.Color(255, 255, 255));
        jLTitulo.setText("Reportes de mala conducta de empleados");
        jLTitulo.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 5, true));
        jLTitulo.setOpaque(true);

        jLImpactoIncidente.setFont(new java.awt.Font("Segoe UI", 1, 28)); // NOI18N
        jLImpactoIncidente.setForeground(new java.awt.Color(255, 255, 255));
        jLImpactoIncidente.setText("Impacto del incidente*:");

        jLAccionesPreviasOpcional.setFont(new java.awt.Font("Segoe UI", 1, 22)); // NOI18N
        jLAccionesPreviasOpcional.setForeground(new java.awt.Color(0, 0, 0));
        jLAccionesPreviasOpcional.setText("(Si hubo advertencias o medidas tomadas antes del reporte, indíquelas)");

        btnAnterior.setBackground(new java.awt.Color(0, 0, 0));
        btnAnterior.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        btnAnterior.setForeground(new java.awt.Color(255, 255, 255));
        btnAnterior.setText("Anterior");
        btnAnterior.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnAnterior.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnteriorActionPerformed(evt);
            }
        });

        jTAccionesPrevias.setBackground(new java.awt.Color(255, 255, 255));
        jTAccionesPrevias.setColumns(20);
        jTAccionesPrevias.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jTAccionesPrevias.setForeground(new java.awt.Color(0, 0, 0));
        jTAccionesPrevias.setLineWrap(true);
        jTAccionesPrevias.setRows(5);
        jTAccionesPrevias.setWrapStyleWord(true);
        jScrollPane1.setViewportView(jTAccionesPrevias);

        jLAccionesPrevias.setFont(new java.awt.Font("Segoe UI", 1, 28)); // NOI18N
        jLAccionesPrevias.setForeground(new java.awt.Color(255, 255, 255));
        jLAccionesPrevias.setText("Acciones previas:");

        jTAOtros.setBackground(new java.awt.Color(255, 255, 255));
        jTAOtros.setColumns(20);
        jTAOtros.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jTAOtros.setForeground(new java.awt.Color(0, 0, 0));
        jTAOtros.setLineWrap(true);
        jTAOtros.setRows(5);
        jTAOtros.setWrapStyleWord(true);
        jScrollPane2.setViewportView(jTAOtros);

        jCLIncumplioNormas.setBackground(new java.awt.Color(255, 255, 255));
        jCLIncumplioNormas.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jCLIncumplioNormas.setForeground(new java.awt.Color(0, 0, 0));
        jCLIncumplioNormas.setText("Incumplió las normas de la empresa");
        jCLIncumplioNormas.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jCLIncumplioNormas.setOpaque(true);

        jCLGeneroConflictos.setBackground(new java.awt.Color(255, 255, 255));
        jCLGeneroConflictos.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jCLGeneroConflictos.setForeground(new java.awt.Color(0, 0, 0));
        jCLGeneroConflictos.setText("Generó conflictos internos");
        jCLGeneroConflictos.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jCLGeneroConflictos.setOpaque(true);

        jCLAfectoProductividad.setBackground(new java.awt.Color(255, 255, 255));
        jCLAfectoProductividad.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jCLAfectoProductividad.setForeground(new java.awt.Color(0, 0, 0));
        jCLAfectoProductividad.setText("Afectó la productividad");
        jCLAfectoProductividad.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jCLAfectoProductividad.setOpaque(true);

        jCLOtro.setBackground(new java.awt.Color(255, 255, 255));
        jCLOtro.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jCLOtro.setForeground(new java.awt.Color(0, 0, 0));
        jCLOtro.setText("Otro (especificar)");
        jCLOtro.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jCLOtro.setOpaque(true);
        jCLOtro.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCLOtroItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 1280, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(73, 73, 73)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLImpactoIncidente, javax.swing.GroupLayout.DEFAULT_SIZE, 334, Short.MAX_VALUE)
                            .addComponent(jCLIncumplioNormas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jCLGeneroConflictos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jCLAfectoProductividad, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jCLOtro, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(55, 55, 55)
                                .addComponent(btnAnterior, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(56, 56, 56)
                                .addComponent(btnEnviar, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLAccionesPreviasOpcional, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jScrollPane1)
                                .addComponent(jLAccionesPrevias)))
                        .addGap(59, 59, 59))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLTitulo)
                        .addGap(43, 43, 43))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(jLImpactoIncidente, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLAccionesPrevias, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jCLIncumplioNormas, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLAccionesPreviasOpcional, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnAnterior, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnEnviar, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(37, 37, 37))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jCLGeneroConflictos, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(jCLAfectoProductividad, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(jCLOtro, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(118, Short.MAX_VALUE))))
        );

        btnCancelar.setBorderPainted(false);
        btnCancelar.setContentAreaFilled(false);
        btnCancelar.setOpaque(false);
        btnCancelar.setUI(new javax.swing.plaf.basic.BasicButtonUI() {
            @Override
            public void paint(Graphics g, JComponent c) {
                Graphics2D g2 = (Graphics2D) g.create();
                g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
                // Pinta un fondo redondeado
                g2.setColor(c.getBackground());
                g2.fillRoundRect(0, 0, c.getWidth(), c.getHeight(), 50, 50);
                super.paint(g2, c);
                g2.dispose();
            }
        });
        btnEnviar.setBorderPainted(false);
        btnEnviar.setContentAreaFilled(false);
        btnEnviar.setOpaque(false);
        btnEnviar.setUI(new javax.swing.plaf.basic.BasicButtonUI() {
            @Override
            public void paint(Graphics g, JComponent c) {
                Graphics2D g2 = (Graphics2D) g.create();
                g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
                // Pinta un fondo redondeado
                g2.setColor(c.getBackground());
                g2.fillRoundRect(0, 0, c.getWidth(), c.getHeight(), 50, 50);
                super.paint(g2, c);
                g2.dispose();
            }
        });
        btnAnterior.setBorderPainted(false);
        btnAnterior.setContentAreaFilled(false);
        btnAnterior.setOpaque(false);
        btnAnterior.setUI(new javax.swing.plaf.basic.BasicButtonUI() {
            @Override
            public void paint(Graphics g, JComponent c) {
                Graphics2D g2 = (Graphics2D) g.create();
                g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
                // Pinta un fondo redondeado
                g2.setColor(c.getBackground());
                g2.fillRoundRect(0, 0, c.getWidth(), c.getHeight(), 50, 50);
                super.paint(g2, c);
                g2.dispose();
            }
        });
    }// </editor-fold>//GEN-END:initComponents
    /**
     * Botón Enviar. Se intenta registrar el nuevo reporte de mala
     * conducta (se espera que contenga toda la información completa).
     * @param evt Click.
     */
    private void btnEnviarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEnviarActionPerformed
        // Se intenta registrar el nuevo reporte de mala conducta.
        try {
            if(checkBoxSeleccionado == null)
                throw new PresentacionException("Por favor, seleccione el impacto del incidente");
            
            // Si el checkBox seleccionado es "Otro".
            else if(checkBoxSeleccionado.equals(jCLOtro)){
                // Si el área de texto del otro tipo de impacto del incidente está vacía.
                if(!(jTAOtros.getText() != null && !jTAOtros.getText().trim().isEmpty()))
                    throw new PresentacionException("Por favor, ingrese la descripción del otro tipo de impacto del incidente");
                // Se obtiene la descripción del otro impacto del incidente recibido.
                reporteMalaConducta.setImpactoIncidente(jTAOtros.getText().trim());
            }
            else // Se obtiene el impacto del incidente seleccionado.
                reporteMalaConducta.setImpactoIncidente(checkBoxSeleccionado.getText());
            
            // Si la descripción de las acciones previas del empleado reportado no está vacía, se agrega al reporte.
            if(jTAccionesPrevias.getText() != null && !jTAccionesPrevias.getText().trim().isEmpty())
                reporteMalaConducta.setAccionesPrevias(jTAccionesPrevias.getText().trim());
            
            // Si el registro fue exitoso.
            if(ControlReportes.getInstance().registrarReporte(reporteMalaConducta) != null){
                // Se muestra un mensaje de confirmación y se regresa al menú de reportes.
                OptionPane.showInfoMessage(this, "¡Reporte registrado con éxito y listo para ser revisado!", "¡Reporte registrado!");
                ControlFlujo.mostrarSubmenuReportes();
            }
        } catch (PresentacionException e) {OptionPane.showErrorMessage(this, "ERROR: " + e.getMessage(), "Error en registro de reporte");}
    }//GEN-LAST:event_btnEnviarActionPerformed
    /**
     * Botón Cancelar. Regresa al Submenú de Reportes de Mala Conducta.
     * @param evt Click.
     */
    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        int confirmacion = OptionPane.showConfirmDialog(this, "¿Seguro que desea cancelar toda la operación?", "Confirmación de cancelación");
        if(confirmacion == JOptionPane.YES_OPTION)
            ControlFlujo.mostrarSubmenuReportes();
    }//GEN-LAST:event_btnCancelarActionPerformed
    /**
     * Botón Anterior. Regresa a la descripción del incidente.
     * @param evt Click.
     */
    private void btnAnteriorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnteriorActionPerformed
        try {
            // Se eliminan del reporte la información de este panel.
            reporteMalaConducta.setImpactoIncidente(null);
            reporteMalaConducta.setAccionesPrevias(null);
            // Se transfiere el reporte al panel de la descripción del incidente.
            ControlFlujo.mostrarDescripcionIncidente(reporteMalaConducta);
        } catch (PresentacionException ex) {OptionPane.showErrorMessage(this, "ERROR: " + ex.getMessage(), "ERROR");}
    }//GEN-LAST:event_btnAnteriorActionPerformed
    /**
     * Se supone que debe mostrar el área de texto solo
     * cuando el checkBox de Otro está seleccionado, pero
     * no funciona como espero. Algo se me escapa.
     * @param evt Seleccionado.
     */
    private void jCLOtroItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCLOtroItemStateChanged
        if(jCLOtro.isSelected()){
            jTAOtros.setVisible(true);
        } else
            jTAOtros.setVisible(false);
    }//GEN-LAST:event_jCLOtroItemStateChanged
    /**
     * Valida que solo el check box recibido sea el
     * único seleccionado.
     * @param checkBox CheckBox.
     */
    private void validarCheckBoxes(JCheckBox checkBox){
        checkBox.addItemListener((ItemEvent e) -> {
            if (e.getStateChange() == ItemEvent.SELECTED) {
                checkBoxSeleccionado = checkBox;
                for(JCheckBox actual : checkBoxes){
                    if(actual.isSelected() && !actual.equals(checkBox))
                        actual.setSelected(false);
                }
            } else{
                // Si se deselecciona el impacto del incidente, se convierte a null el atributo checlBoxSeleccionado.
                boolean hayCheckBoxSeleccionado = false;
                for(JCheckBox actual : checkBoxes){
                    if(actual.isSelected())
                        hayCheckBoxSeleccionado = true;
                }
                if(!hayCheckBoxSeleccionado)
                    checkBoxSeleccionado = null;
            }
        });
    }
    
    /**
     * Reemplaza el reporte de este panel por
     * el reporte recibido.
     * @param reporte Reporte en transferencia.
     * @throws PresentacionException Excepción de la capa de Presentación.
     */
    public void setReporte(ReporteMalaConductaDTO reporte) throws PresentacionException{
        if(reporte != null)
            reporteMalaConducta = reporte;
        else
            throw new PresentacionException("El reporte no puede estar vacío.");
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAnterior;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnEnviar;
    private javax.swing.JCheckBox jCLAfectoProductividad;
    private javax.swing.JCheckBox jCLGeneroConflictos;
    private javax.swing.JCheckBox jCLIncumplioNormas;
    private javax.swing.JCheckBox jCLOtro;
    private javax.swing.JLabel jLAccionesPrevias;
    private javax.swing.JLabel jLAccionesPreviasOpcional;
    private javax.swing.JLabel jLImpactoIncidente;
    private javax.swing.JLabel jLTitulo;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTAOtros;
    private javax.swing.JTextArea jTAccionesPrevias;
    // End of variables declaration//GEN-END:variables
}